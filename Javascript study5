자바스크립트 문자열 
https://dour-spot-fd4.notion.site/Array-7574d558669947cc96f44eb3b6934963

문자열은 텍스트 데이터이다. 
자바스크립트 문자열은 유니코드 텍스트이며 유니코드는 텍스트 데이터에 관한 표준이다.
유니코드 자체는 모든 언어의 텍스트를 나타낼 수 있지만, 널리 쓰이지 않는 글자나 언어를 사용해야 한다면 유니코드에서 코드 포인트 렌더링을 다로 조사 필요

자바스크립트 문자열 리터럴에는 작은,큰 따옴표와 백틱을 사용한다. 백틱은 es6에서 도입

--------------------------------------------------------------------------------------

템플릿 문자열

const message = "The current temperature is " + currentTemp + "\u00b0C"
백틱은 위와 같은 코드를 아래와 같이 변형에서 사용이 가능하다. 
const message = `The current temperature is ${currentTemp}\u00b0C`;
이와 같은 걸 문자열 템플릿이라고 한다.

--------------------------------------------------------------------------------------

여러 줄 문자열

백틱사용전에는 \n표시 꼭 필요
const multiline = "line1\nline2";
백틱을 사용 그냥 한칸 줄바꿈하면 끝
const multiline = `line1
line2`;

=======================================================
Array
https://dour-spot-fd4.notion.site/Array-7574d558669947cc96f44eb3b6934963

배열과 배열 처리
기본사항

1.배열은 객체와 달리 본질에서 순서가 있는 데이터 집합이며 0으로 시작하는 숫자형 인덱스를 사용
2.js의 배열은 비균질적 =>한 배열의 요소가 모두 같은 타입일 필요는 없다. 다른 배열이나 객체도 포함 가능
3.배열은 대괄호로 만들고 인덱스로 접근할 때도 대괄호를 사용
4.length를 사용하면 요소 개수를 알 수 있다.
5.배열에 배열 길이보다 큰 인덱스를 사용해서 요소를 할당하면 자동으로 인덱스에 맞게 늘어나며, 빈자리를 undefined로 채워진다.
6.array 생성자를 써서 배열을 만들 수 있지만 그렇게 하는 경우는 많이 없다.

const arr1 = [1, 2, 3]; // 숫자로 구성된 배열
const arr2 = ["one", 2, "three"]; // 비균질적 배열
const arr3 = [[1, 2, 3], ["one", 2, "three"]]; // 배열을 포함한 배열

//배열 길이 늘리기
arr1[4] = 5;
console.log(arr1); // [1, 2, 3, undefined, 5]
console.log(arr1.length); // 5

// 배열의 현재 길이보다 큰 인덱스에 접근하는 것만으로 배열의 길이가 늘어나지는 않습니다.
console.log(arr2[10]); // undefined
console.log(arr2.length); // 3

// Array 생성자 (거의 사용하지 않습니다.)
const arr5 = new Array(); //빈배열

------------------------------------------------------------------------------------배열의 처음이나 끝에서 요소 하나를 추가하거나 제거하기

push와 unshift는 새 요소를 추가해서 늘어난 길이를 반환하고, pop과 shift는 제거된 요소를 반환
const arr = ["b", "c", "d"];
arr.push("e"); // 4.  ["b", "c, "d", "e"]  뒤에 추가
arr.pop(); // "e".  ["b", "c", "d"]  뒤에 제거
arr.unshift("a"); // 4. ["a", "b", "c", "d"]  앞에 추가
arr.shift(); // "a"  ["b", "c", "d"]  앞에 제거

--------------------------------------------------------------------------------------
 배열의 끝에 여러 요소 추가하기

concat 메서드는 배열의 끝에 여러 요소를 추가한 사본을 반환합니다. concat에 배열을 넘기면 이 메서드는 배열을 분해해서 원래 배열에 추가한 사본을 반환한다.

const arr = [1, 2, 3];
arr.concat(4, 5, 6); // [1, 2, 3, 4, 5, 6]. 
arr.concat([4, 5, 6]); // [1, 2, 3, 4, 5, 6]. 
arr.concat([4, 5], 6); // [1, 2, 3, 4, 5, 6]. 
arr.concat(4, [5, 6]); // [1, 2, 3, 4, 5, 6]. 

-------------------------------------------------------------------------------------
 배열 일부 가져오기

배열의 일부만 가져올 때는 slice 메서드를 사용

const arr = [1, 2, 3, 4, 5];
arr.slice(3); // [4, 5] index 3부터
arr.slice(2, 4); // [3, 4] index 2부터 4전까지
arr.slice(-2); // [4, 5] index -2부터 뒤에서 2번째부터
arr.slice(1, -2); // [2, 3] index 1부터 -2전까지
arr.slice(-2, -1); // [4]index -2부터 -1전까지

-------------------------------------------------------------------------------------
배열 안에서 요소 교체하기

copyWithin은 ES6에서 도입. 이 메서드는 배열 요소를 복사해서 다른 위치에 붙여넣고, 기존의 요소를 덮어씁니다. 첫 번째 매개변수는 복사한 요소를 붙여넣을 위치이고, 두 번째 매개변수는 복사를 시작할 위치이고, 세 번째 매개변수는 복사를 끝낼 위치

const arr = [1, 2, 3, 4];
arr.copyWithin(1, 2); //  [1, 3, 4, 4]
arr.copyWithin(2, 0, 2); //  [1, 3, 1, 3] 
arr.copyWithin(0, -3, -1); //  [3, 1, 1, 3] 

--------------------------------------------------------------------------------------
임의의 위치에 요소 추가하기

splice
첫 번째 매개변수는 수정을 시작할 인덱스이고, 두 번째 매개변수는 제거할 요소 숫자입니다. 아무 요소도 제거하지 않을 때는 0을 넘깁니다.

const arr = [1, 5, 7];
arr.splice(1, 0, 2, 3, 4); // [1, 2, 3, 4, 5, 7] 인덱스 1부터 0개를 삭제하고 2,3,4를 1인덱스 부터 추가
arr.splice(5, 0, 6); // [1, 2, 3, 4, 5, 6, 7]  인데스 5부터 0개삭제 인데스5에 6을 추가
arr.splice(1, 2); //[1, 4, 5, 6, 7]  인덱스1부터 2개 삭제
arr.splice(2, 1, 'a', 'b'); //  [1, 4, 'a', 'b', 6, 7] 인데스 2부터 1개 삭제 후 a,b추가

-------------------------------------------------------------------------------------

특정 값으로 배열 채우기

fill

const arr = new Array(5).fill(1); // arr이 [1, 1, 1, 1, 1]로 초기화됩니다.
arr.fill("a"); // ["a", "a", "a", "a", "a"]
arr.fill("b", 1); // ["a", "b", "b", "b", "b"] 
arr.fill("c", 2, 4); //  ["a", "b", "c", "c", "b"] 
arr.fill(5.5, -4); // ["a", 5.5, 5.5, 5.5, 5.5] 
arr.fill(0, -3, -1); // ["a", 5.5, 0, 0, 5.5] 

----------------------------------------------------------------------------------
reverse는 이름 그대로 배열 요소의 순서를 반대로 바꿉니다
