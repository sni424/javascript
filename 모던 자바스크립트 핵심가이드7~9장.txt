루프

for of
1. 배열에 대한 반복
const me = ["name", "age", "height", "weight"];
for (let a = 0; a < me.length; a += 1) {
    console.log(me[a]);
}

for of로도 사용가능
const me = ["name", "age", "height", "weight"];
for (const my of me) {
    console.log(my);
}

2. 객체에 대한 반복
const me = {
    name: "jo",
    age: 28,
    height: 175,
    weight: 73,
};

for (const my of Object.keys(me)) {
    const value = me[my];
    console.log(my, value);
};

3. for in루프
const me = {
    name: "jo",
    age: 28,
    height: 175,
    weight: 73,
};

for (const my in me) {
    console.log(my, me[my]);
};

4. for of와 for in의 차이
const me = ["name", "age", "height", "weight"];
for (const my of me) {
    console.log(my);
}
=>"name", "age", "height", "weight"

const me = ["name", "age", "height", "weight"];
for (const my in me) {
    console.log(my);
}
=>0,1,2,3

배열에서 for of는 value를 전달하지만 for in은 key(index)를반환한다.

=====================================================
배열 메서드

1. Array.from() map과 비슷 새로운 객체를 만듬

console.log(Array.from('foo'));
=>["f", "o", "o"]

console.log(Array.from([1, 2, 3], x => x + x));
[2, 4, 6] 

2. Array.from() 전달받은 모든 인수로 배열을 생성
아래와 같이 배열을 생성하는게 다르다.
Array.of(7);       // [7]
Array.of(1, 2, 3); // [1, 2, 3]

Array(7);          // [ , , , , , , ]
Array(1, 2, 3);    // [1, 2, 3]

3. Array.find() 함수를 충족하는 배열의 첫 번째 원소만 반환 없으면 undefined
const array1 = [1, 2, 3, 4, 5];

const found = array1.find(a => a > 3);
console.log(found);
=>4

4. Array.findIndex() 충족하는 배열의 첫 번째 인덱스
const array1 = [1, 2, 3, 4, 5];

const found = array1.findIndex(a => a > 3);
console.log(found);
=>3

5. Array.some() Array.every()
말그대로 some은 조건을 충족하는 것 하나만 있으면 true아니면 false
every는 모든 요소가 조건을 충족해야함

=====================================================
스프레드 연산자와 레스트 매개변수
 
0개이상의 인수 또는 원소가 예상되는 위치에서 배열 표현식 또는 문자열과 같은 이터러블 항목을 확장하거나 0개 이상의 키/값 쌍이 예상되는 위치에서 객체 표현식을 확장 가능
뭔뜻?

1. 배열의 결합
const array1 = [1, 2, 3, 4, 5];
const array2 = [7, 8, 9];
const addArray = [...array1, 6, ...array2];
console.log(addArray);
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]

2. 배열의 복사
const array1 = [1, 2, 3, 4, 5];
const array2 = array1; 이건 별로 좋은 방법이 아니다.
그 이유는 1을 수정하면 2도 변경된다. 2가 1을 복사한게아니라 단순히 참조한것이기 때문

그래서
const array1 = [1, 2, 3, 4, 5];
const array2 = [...array1];
이런식으로 스프레드를 쓰면 복사가 된다.

3. 함수와 스프레드 연산자
const array2 = [7, 8, 9];

function multiply(a, b, c) {
    console.log(a * b * c);
};
multiply(...array2);
만약 요소가 파라미터보다 많으면 넘치는건 제외 해당되는것만 할당.

4. 객체 리터럴과 스프레드
const human = {
    gender: "men",
    age: 28,
    country: "korea",
};

let add = { ...human };
console.log(add);
=>{gender: 'men', age: 28, country: 'korea'}

5. 레스트 매개변수
레스트 문법은 점 3개로 이루어진 점에서 스프레드와 문법은 똑같지만 기능은 다르다. 정반대로 스프레드는 확장하는 반면 레스트는 하나로 압축한다.

const numberOne = [1, 2, 3, 4, 5, 6, 7, 8, 9];
const [hello, wow, ...okay] = numberOne;
console.log(...okay);
=>3 4 5 6 7 8 9